<project default="jars" basedir=".">

	<!--Initialization Target-->
	<target name="init">
		<tstamp/>
		<property name="Name" value="Program D"/>
		<property name="version" value="4.6"/>
		<property name="year" value="2005"/>
		
		<property name="build.compiler" value="modern"/>
		<property name="debug" value="on"/>
		<property name="optimize" value="on"/>
		<property name="deprecation" value="on"/>
		
		<property name="src.dir" value="${basedir}/JavaSource"/>
		<property name="webapp.dir" value="${basedir}/WebContent"/>
		<property name="webapp.lib.dir" value="${webapp.dir}/WEB-INF/lib"/>
		<property name="compile.lib.dir" value="${basedir}/lib"/>
	    <property name="distrib.dir" value="${basedir}/distrib"/>
	    
	    <path id="saxon.classpath">
	    	<pathelement location="/usr/share/java/saxon8.jar"/>
	    </path>
		
		<property name="build.dir" value="${basedir}/build.tmp"/>
		<path id="build.classpath">
	    	<pathelement location="${compile.lib.dir}/gnu.getopt-1.0.10.jar"/>
	    	<pathelement location="${compile.lib.dir}/jsp-api.jar"/>
		    <pathelement location="${webapp.lib.dir}/js.jar"/>
		    <pathelement location="${compile.lib.dir}/servlet-api.jar"/>
		    <pathelement location="${webapp.lib.dir}/log4j-1.2.13.jar"/>
		</path>
		<property name="javadoc.dir" value="${basedir}/docs/api"/>
		
		<property name="main.jar" value="${distrib.dir}/programd-main.jar"/>
		<property name="rhino.jar" value="${distrib.dir}/programd-rhino.jar"/>
	    
	    <property name="war" value="${basedir}/programd.war"/>
		
		<property name="distrib.src.dir" value="${distrib.dir}/distrib.src.tmp"/>
		<property name="distrib.bin.dir" value="${distrib.dir}/distrib.bin.tmp"/>
		<property name="distrib.src.zip" value="${distrib.dir}/programd-${version}-src.zip"/>
		<property name="distrib.bin.zip" value="${distrib.dir}/programd-${version}-bin.zip"/>
		<property name="distrib.src.tar.bz2" value="${distrib.dir}/programd-${version}-src.tar.bz2"/>
		<property name="distrib.bin.tar.bz2" value="${distrib.dir}/programd-${version}-bin.tar.bz2"/>
		
		<filter token="year" value="${year}"/>
		<filter token="version" value="${version}"/>
		<filter token="date" value="${TODAY}"/>
		<filter token="log" value="true"/>
		<filter token="verbose" value="true"/>
		
	</target>
    
    <!--Generate CoreSettings from core.xml.-->
    <target name="core-settings">
        <java classpathref="saxon.classpath"
              classname="net.sf.saxon.Transform"
              fork="yes"
              dir=".">
          <arg line="-o JavaSource/org/aitools/programd/CoreSettings.java"/>
          <arg line="conf/core.xml"/>
          <arg line="resources/xslt/generate-settings-class.xslt"/>
        </java>
    </target>

	<!--Prepare the build directory.-->
	<target name="prepare" depends="init">
		<mkdir dir="${build.dir}"/>
	</target>
	
	<!--Prepare the source code.-->
	<target name="prepare-src" depends="prepare">
		<mkdir dir="${build.dir}"/>
		<!--Copy resources.-->
		<copy todir="${build.dir}">
			<fileset dir="${webapp.dir}" includes="resources/schema/**"/>
		</copy>
	</target>
	
	<!--Compile the source directory.-->
	<target name="compile" depends="prepare-src">
		<javac srcdir="${src.dir}"
		       destdir="${build.dir}"
		       classpathref="build.classpath"
		       debug="${debug}"
		       deprecation="${deprecation}"
		       optimize="${optimize}"/>
	</target>
	
	<!--Create the jars.-->
	<target name="jars" depends="compile">
	    <mkdir dir="${distrib.dir}"/>
		<jar jarfile="${main.jar}">
			<fileset dir="${build.dir}/"
				includes="org/**"
				excludes="org/aitools/programd/interpreter/RhinoInterpreter.class"/>
			<fileset dir="${src.dir}/" includes="org/aitools/programd/gui/icons/**"/>
			<fileset dir="${build.dir}/" includes="resources/schema/**"/>
		</jar>
		<jar jarfile="${rhino.jar}">
			<fileset dir="${build.dir}/"
				includes="org/aitools/programd/interpreter/RhinoInterpreter.class"/>
		</jar>
	</target>
    
    <!--Create a WAR file.-->
    <target name="war" depends="compile">
        <delete file="${war}"/>
        <war destfile="${war}"
        	 webxml="${webapp.dir}/WEB-INF/web.xml"
             manifest="${webapp.dir}/META-INF/MANIFEST.MF">
            <fileset dir="${webapp.dir}">
            	<include name="pages/**"/>
            </fileset>
            <fileset dir="${basedir}">
            	<include name="resources/**"/>
                <exclude name="resources/database/**"/>
                <exclude name="resources/icons/**"/>
                <exclude name="resources/testing/**"/>
                <exclude name="resources/xslt/**"/>
            </fileset>
            <lib dir="${webapp.lib.dir}"/>
            <classes dir="${build.dir}"/>
            <classes dir="${src.dir}">
                <include name="log4j.xml"/>
            </classes>
            <webinf dir="${webapp.dir}/WEB-INF">
            	<include name="aiml.tld"/>
            	<include name="c.tld"/>
            	<include name="c-rt.tld"/>
		    	<include name="dwr.xml"/>
            </webinf>
        </war>
    </target>
	
	<!--Create the API documentation.-->
	<target name="javadoc" depends="prepare-src">
		<mkdir dir="${javadoc.dir}"/>
		<javadoc packagenames="*"
		         sourcepath="${src.dir}"
		         destdir="${javadoc.dir}"
		         classpathref="build.classpath"
		         author="true"
		         version="true"
		         use="true"
		         splitindex="true"
		         noindex="false"
	             windowtitle="${Name} API"
		         doctitle="${Name} API">
			<link href="http://java.sun.com/j2se/1.5.0/docs/api/"/>
			<link href="http://www.urbanophile.com/arenn/hacking/getopt/"/>
			<link href="http://java.sun.com/j2ee/1.4/docs/api/"/>
		</javadoc>
	</target>
	
	<!--Create the schema documentation.-->
	<!--Note: You'll need the xs3p stylesheet
	    (from http://titanium.dstc.edu.au/xml/xs3p/) to generate this.
	    Change the xs3p property below to match wherever you install it.-->
	<target name="schema-doc">
		<property name="xs3p" value="/usr/local/xs3p/xs3p.xsl"/>
		<property name="schema" value="../resources/schema"/>
		<property name="schema-doc" value="../docs/schema"/>
		<delete dir="${schema-doc}"/>
		<xslt in="${schema}/AIML.xsd" out="${schema-doc}/AIML.html" style="${xs3p}">
        	<param name="title" expression="A Schema for AIML 1.0.1"/>
    		<param name="sortByComponent" expression="false"/>
		</xslt>
		<xslt in="${schema}/bot-configuration.xsd" out="${schema-doc}/bot-configuration.html" style="${xs3p}">
        	<param name="title" expression="Program D Bot Configuration Schema"/>
    		<param name="sortByComponent" expression="false"/>
		</xslt>
		<xslt in="${schema}/ChatLog.xsd" out="${schema-doc}/ChatLog.html" style="${xs3p}">
        	<param name="title" expression="Program D Chat Log Schema"/>
    		<param name="sortByComponent" expression="false"/>
		</xslt>
		<xslt in="${schema}/test-cases.xsd" out="${schema-doc}/test-cases.html" style="${xs3p}">
        	<param name="title" expression="Program D Test Suite Schema"/>
    		<param name="sortByComponent" expression="false"/>
		</xslt>
	</target>

	<!--Clean target.-->
	<target name="clean" depends="init">
		<delete dir="${build.dir}"/>
	</target>
	
	<!--Make the distribs.-->
	<target name="distribs" depends="distclean,jars">
		<!--The source distribs.-->
		<delete dir="${distrib.src.dir}"/>
		<copy todir="${distrib.src.dir}">
			<fileset dir="${basedir}">
				<exclude name="aiml/**"/>
				<exclude name="build.tmp/**"/>
				<exclude name="classes/**"/>
				<exclude name="conf/test-listeners.xml"/>
				<exclude name="distrib*.tmp/**"/>
				<exclude name="docs/**"/>
				<exclude name="ffm/**"/>
				<exclude name="lib/*-listener/*.jar"/>
				<exclude name="logs/**"/>
				<exclude name="**/programd-*.jar"/>
				<exclude name="programd-*.zip"/>
				<exclude name="programd-*.tar.bz2"/>
			</fileset>
		</copy>
		<zip destfile="${distrib.src.zip}">
			<zipfileset dir="${distrib.src.dir}" prefix="ProgramD/"/>
		</zip>
		<tar destfile="${distrib.src.tar.bz2}" compression="bzip2">
			<tarfileset dir="${distrib.src.dir}" prefix="ProgramD/"/>
		</tar>
		<!--The binary distribs.-->
		<delete dir="${distrib.bin.dir}"/>
		<copy todir="${distrib.bin.dir}">
			<fileset dir="${basedir}">
				<exclude name="aiml/**"/>
				<exclude name="build.tmp/**"/>
				<exclude name="classes/**"/>
				<exclude name="conf/test-listeners.xml"/>
				<exclude name="distrib*.tmp/**"/>
				<exclude name="docs/**"/>
				<exclude name="ffm/**"/>
				<exclude name="lib/*-listener/*.jar"/>
				<exclude name="logs/**"/>
				<exclude name="programd-*.zip"/>
				<exclude name="programd-*.tar.bz2"/>
				<exclude name="src/**"/>
				<exclude name=".classpath"/>
				<exclude name=".project"/>
				<exclude name="build.xml"/>
				<exclude name="secret.key"/>
			</fileset>
		</copy>
		<zip destfile="${distrib.bin.zip}">
			<zipfileset dir="${distrib.bin.dir}" prefix="ProgramD/"/>
		</zip>
		<tar destfile="${distrib.bin.tar.bz2}" compression="bzip2">
			<tarfileset dir="${distrib.bin.dir}" prefix="ProgramD/"/>
		</tar>
		<delete dir="${distrib.src.dir}"/>
	    <delete dir="${distrib.bin.dir}"/>
	</target>
	
    <!--Clean up the distribs.-->
	<target name="distclean" depends="clean">
		<delete dir="${dist.root}"/>
		<delete dir="${build.dir}"/>
		<delete dir="${javadoc.dir}"/>
		
		<delete file="${main.jar}"/>
		<delete file="${listeners.jar}"/>
		<delete file="${rhino.jar}"/>
		
		<delete dir="${distrib.src.dir}"/>
		<delete dir="${distrib.bin.dir}"/>
		
		<delete file="${distrib.src.zip}"/>
		<delete file="${distrib.bin.zip}"/>
		<delete file="${distrib.src.tar.bz2}"/>
		<delete file="${distrib.bin.tar.bz2}"/>
	</target>

</project>
